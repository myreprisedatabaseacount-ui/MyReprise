version: '3.8'

services:
  # NGINX - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: myreprise_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nodejs-app
      # - payment-service  # Temporairement désactivé
      - ai-service
      # - graph-service  # Temporairement désactivé
    networks:
      - myreprise-network
    restart: unless-stopped

  # Service Principal Node.js - Logique Métier
  nodejs-app:
    build: ./logic
    container_name: myreprise_nodejs_1
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PAYMENT_SERVICE_URL=http://payment-service:8080
      - AI_SERVICE_URL=http://ai-service:8000
      - GRAPH_SERVICE_URL=http://graph-service:8001
    volumes:
      - ./logic:/app
      - /app/node_modules
    networks:
      - myreprise-network
    restart: unless-stopped
    depends_on:
      - redis
      - mysql

  # Service Node.js Instance 2 (pour load balancing)
  nodejs-app-2:
    build: ./logic
    container_name: myreprise_nodejs_2
    ports:
      - "3002:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PAYMENT_SERVICE_URL=http://payment-service:8080
      - AI_SERVICE_URL=http://ai-service:8000
      - GRAPH_SERVICE_URL=http://graph-service:8001
    volumes:
      - ./logic:/app
      - /app/node_modules
    networks:
      - myreprise-network
    restart: unless-stopped
    depends_on:
      - redis
      - mysql

  # Service de Paiement Spring Boot Java 17
  # Service de Paiement Spring Boot
  payment-service:
    build: ./payment-service
    container_name: myreprise_payment
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/myreprise_payments
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    networks:
      - myreprise-network
    restart: unless-stopped
    depends_on:
      - mysql

  # Service IA FastAPI
  ai-service:
    build: ./ai-service
    container_name: myreprise_ai
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./ai-service:/app
      - ai-models:/app/models
    networks:
      - myreprise-network
    restart: unless-stopped
    depends_on:
      - redis

  # Service Graph Neo4j FastAPI
  graph-service:
    build: ./graph-service
    container_name: myreprise_graph_service
    ports:
      - "8002:8002"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j123
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
    volumes:
      - ./graph-service:/app
    depends_on:
      - neo4j
      - mysql
    networks:
      - myreprise-network
    restart: unless-stopped

  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: myreprise_mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=myreprise
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - myreprise-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: myreprise_redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - myreprise-network
    restart: unless-stopped

  # Neo4j Community Edition - Base de données de graphes
  neo4j:
    image: neo4j:5.15-community
    container_name: myreprise_neo4j
    ports:
      - "7474:7474"  # Interface Neo4j Browser
      - "7687:7687"  # Port Bolt pour connexions
    environment:
      - NEO4J_AUTH=neo4j/neo4j123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4J_server_default_listen_address=0.0.0.0
      - NEO4J_server_connector_bolt_listen_address=0.0.0.0:7687
      - NEO4J_server_connector_http_listen_address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - myreprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p neo4j123 'RETURN 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Service Graph - Algorithmes de recommandation (FastAPI)
  # TEMPORAIREMENT DÉSACTIVÉ - À créer plus tard
  # graph-service:
  #   build: ./graph-service
  #   container_name: myreprise_graph
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     - ENVIRONMENT=production
  #     - NEO4J_URI=bolt://neo4j:7687
  #     - NEO4J_USER=neo4j
  #     - NEO4J_PASSWORD=${NEO4J_PASSWORD}
  #     - REDIS_URL=redis://redis:6379
  #     - MYSQL_URL=${DATABASE_URL}
  #   volumes:
  #     - ./graph-service:/app
  #     - graph-models:/app/models
  #   networks:
  #     - myreprise-network
  #   restart: unless-stopped
  #   depends_on:
  #     - neo4j
  #     - redis
  #     - mysql
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus
    container_name: myreprise_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - myreprise-network
    restart: unless-stopped

  # Grafana pour visualisation (optionnel)
  grafana:
    image: grafana/grafana
    container_name: myreprise_grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - myreprise-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  ai-models:
  prometheus_data:
  grafana_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  # graph-models:  # Temporairement désactivé

networks:
  myreprise-network:
    driver: bridge
