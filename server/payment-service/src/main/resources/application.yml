# Configuration principale du service de paiement MyReprise
spring:
  application:
    name: myreprise-payment-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/myreprise_payments}
    username: ${SPRING_DATASOURCE_USERNAME:myreprise_user}
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      validation-timeout: 5000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:update} # create, create-drop, update, validate, none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    show-sql: ${HIBERNATE_SHOW_SQL:false}
    generate-ddl: true
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true
        order_inserts: true
        order_updates: true
        batch_size: 20
        connection:
          charSet: UTF-8
          characterEncoding: utf8
          useUnicode: true
        cache:
          use_second_level_cache: false
          use_query_cache: false
        jdbc:
          time_zone: UTC
  
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 10
          max-idle: 5
          min-idle: 2
          max-wait: 2000ms
  
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:3000}
  
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: Europe/Paris
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX

server:
  port: ${SERVER_PORT:8080}
  error:
    include-message: always
    include-binding-errors: always
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  health:
    redis:
      enabled: true
    db:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

logging:
  level:
    com.myreprise.payment: ${LOGGING_LEVEL:INFO}
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/payment-service.log
    max-size: 10MB
    max-history: 30

# Configuration des paiements
payment:
  stripe:
    public-key: ${STRIPE_PUBLIC_KEY:pk_test_your_stripe_public_key}
    secret-key: ${STRIPE_SECRET_KEY:sk_test_your_stripe_secret_key}
    webhook-secret: ${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret}
    api-version: "2023-10-16"
  
  paypal:
    client-id: ${PAYPAL_CLIENT_ID:your_paypal_client_id}
    client-secret: ${PAYPAL_CLIENT_SECRET:your_paypal_client_secret}
    environment: ${PAYPAL_ENVIRONMENT:sandbox} # sandbox ou live
  
  webhook:
    base-url: ${WEBHOOK_BASE_URL:https://api.myreprise.com}
    
  security:
    allowed-origins: ${ALLOWED_ORIGINS:http://localhost:3000,https://myreprise.com}

# Configuration JWT
jwt:
  secret: ${JWT_SECRET:your_very_long_jwt_secret_key_here}
  expiration: ${JWT_EXPIRATION:86400} # 24h en secondes

# Configuration API
api:
  version: v1
  base-path: /api/${api.version}

---
# Profil de d√©veloppement
spring:
  config:
    activate:
      on-profile: dev
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  
  h2:
    console:
      enabled: true

logging:
  level:
    com.myreprise.payment: DEBUG
    org.springframework.security: DEBUG

---
# Profil de test
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect

---
# Profil de production
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    com.myreprise.payment: INFO
    org.springframework.security: WARN
